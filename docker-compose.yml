version: '3.9'
name: spring-observabilidade

x-logging: &default-logging
  driver: loki
  options:
    loki-url: http://localhost:3100/loki/api/v1/push
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

# Infraestrutura
services:
  loki:
    container_name: loki
    image: grafana/loki:2.9.4
    user: root
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./configs/loki/config.yml:/etc/loki/config.yml
      - ./configs/loki/data:/loki/wal/
    ports:
      - 3100:3100

  prometheus:
    container_name: prometheus
    user: root
    image: prom/prometheus:v2.49.1
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus/config.yml:/prometheus/config.yml
      - ./configs/prometheus/data/:/prometheus/data/
    command:
      - --config.file=/prometheus/config.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    container_name: tempo
    image: grafana/tempo:2.3.1
    command: 
      - --target=all
      - --storage.trace.backend=local
      - --storage.trace.local.path=/var/tempo/cluster
      - --auth.enabled=false
    volumes:
      - ./configs/tempo/data/:/var/tempo/wal/
      - ./configs/tempo/data/cluster/:/var/tempo/cluster/
    ports:
      - 14250:14250
      - 4317:4317
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    container_name: grafana
    build: ./configs/grafana/
    ports:
      - 3000:3000
    volumes:
      - ./configs/grafana/datasource.yml:/usr/share/grafana/conf/provisioning/datasources/datasources.yml
      - ./configs/grafana/dashboards.yml:/usr/share/grafana/conf/provisioning/dashboards/dashboards.yml
      - ./configs/grafana/dashboards:/usr/share/grafana/dashboards
      - ./configs/grafana/grafana.db:/usr/share/grafana/data/grafana.db
      # - ./configs/grafana/data:/usr/share/grafana/data
      # - ./configs/grafana/alerts/:/usr/share/grafana/conf/provisioning/alerting/
      # - ./configs/grafana/notifiers/:/usr/share/grafana/conf/provisioning/notifiers/
      # - ./configs/grafana/plugins/:/usr/share/grafana/conf/provisioning/plugins/
      # - ./configs/grafana/roles/:/usr/share/grafana/conf/provisioning/access-control/
    depends_on:
      - loki
      - tempo
      - prometheus
      - app-a
      - app-b
      - app-c
    logging: *default-logging

  blackbox-exporter:
    container_name: blackbox-exporter
    image: prom/blackbox-exporter:v0.24.0
    ports: 
      - 9115:9115
    volumes:
      - ./configs/blackbox/config.yml:/blackbox/config.yml
    command: --config.file=/blackbox/config.yml
    depends_on:
      - prometheus

  # Aplicações
  app-a:
    container_name: app-a
    build: ./app/
    environment:
      OTEL_SERVICE_NAME: app-a # Nome do serviço para o Span
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317 # Envia rastreamentos ao Grafana Tempo
      OTEL_RESOURCE_ATTRIBUTES: compose_service=app-a # Nome customizado para o Grafana Tempo e Loki
      OTEL_METRICS_EXPORTER: none # Desabilitado exportador de métricas
      OTEL_LOGS_EXPORTER: none # Desabilitado exportador de logs da aplicação
      MANAGEMENT_METRICS_TAGS_APPLICATION: app-a # Sobrescrever o valor padrão de "management.metrics.tags.application" localizado em "app/src/main/resources/application.properties"
      TARGET_ONE_HOST: app-b
      TARGET_TWO_HOST: app-c
      OTEL_JAVAAGENT_LOGGING: application
    depends_on:
      - postgres
    ports:
      - 8080:8080
    logging: *default-logging

  app-b:
    container_name: app-b
    build: ./app/
    environment:
      OTEL_SERVICE_NAME: app-b
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      OTEL_RESOURCE_ATTRIBUTES: compose_service=app-b
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      MANAGEMENT_METRICS_TAGS_APPLICATION: app-b
      TARGET_ONE_HOST: app-b
      TARGET_TWO_HOST: app-c
      OTEL_JAVAAGENT_LOGGING: application
    depends_on:
      - postgres
    ports:
      - 8081:8080
    logging: *default-logging

  app-c:
    container_name: app-c
    build: ./app/
    environment:
      OTEL_SERVICE_NAME: app-c
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      OTEL_RESOURCE_ATTRIBUTES: compose_service=app-c
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      MANAGEMENT_METRICS_TAGS_APPLICATION: app-c
      TARGET_ONE_HOST: app-b
      TARGET_TWO_HOST: app-c
      OTEL_JAVAAGENT_LOGGING: application
    depends_on:
      - postgres
    ports:
      - 8082:8080
    logging: *default-logging

  postgres:
    container_name: postgresql
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    logging: *default-logging

  redis:
    container_name: redis
    image: redis:7.2.4
    ports:
      - 6379:6379
    logging: *default-logging

  # k6:
    # container_name: k6
    # image: grafana/k6:0.49.0
    # volumes:
      # - ./scripts/grafana-k6.js:/scripts/grafana-k6.js:ro
    # command: run /scripts/grafana-k6.js
    # depends_on:
      # - app-a
      # - app-b
      # - app-c
